#include "include.h"

void gram_schmidt(gsl_matrix*, gsl_matrix*);
void QR_solve(gsl_matrix*, gsl_matrix*, gsl_vector*, gsl_vector*);
void inverse(gsl_matrix*, gsl_matrix*, gsl_matrix*);
void print_matrix(FILE*, gsl_matrix*);

int main(){

size_t n = 2;
size_t m = 2;

gsl_matrix* A = gsl_matrix_alloc(n,m);
gsl_matrix* Q = gsl_matrix_alloc(n,m);
gsl_matrix* R = gsl_matrix_calloc(m,m);
gsl_vector* b = gsl_vector_alloc(n);

double x[9] = {0.1, 1.33, 2.55, 3.78, 5, 6.22,    7.45    8.68     9.9};
//y[]  =   -15.3    0.32    2.45    2.75    2.27    1.35   0.157   -1.23   -2.75
//dy[] =    1.04   0.594   0.983   0.998    1.11   0.398   0.535   0.968   0.478


for(int i=0; i<n; i++){
        gsl_vector_set(b,i,(double)rand()/RAND_MAX*5.0-1.0 );           //random double i [-2,5]

        for(int j=0; j<m; j++){
                gsl_matrix_set(A,i,j,(double)rand()/RAND_MAX*7.0-2.0 );         //random double i [-2,5]
                gsl_matrix_set(Q,i,j, gsl_matrix_get(A,i,j) );
                }
        }



gram_schmidt(Q,R);


printf("\n A = \n");
print_matrix(stdout,A);
printf("\n Q = \n");
print_matrix(stdout,Q);
printf("\n R = \n");
print_matrix(stdout,R);

return 0; }
